/^(.+)\\([^\/]+)$                   regex para path absoluto

/\\/g                               regex para detectar \

.replace(/\\/g , "/");

Rutas de prueba

C:\Users\gabri\Desktop\laboratoria-md-links\LIM016-md-links\pruebas\prueba2.md

pruebas\prueba2.md

C:\Users\gabri\Desktop\laboratoria-md-links\LIM016-md-links\prueba1.md

prueba1.md

C:\Users\gabri\Desktop\laboratoria-md-links\LIM016-md-links\src

src

C:\Users\gabri\Desktop\laboratoria-md-links\LIM016-md-links\src\commands

src\commands





//Verificar y recopilar links si los hay
const getLinksAndInfo = (filePath) => {
    const linksArray = fileContent(filePath).match(regexLinkNotation)
    // console.log(linksArray)

    return linksArray.map((mdLink) => {
        const href = mdLink.match(regexUrl).join().slice(1, -1)
        const text = mdLink.match(regexText).join().slice(1, -1)
        return {
            href: href,
            text: text,
            file: filePath
        }
    })
}




const validateTrue = (links, path) => {
    const basicInfoArray = validateFalse(links, path)
    return Promise.allSettled(basicInfoArray.map(link => {
        const request = axios.get(link.href)
            .then((res) => ({
                href: link.href,
                text: link.text,
                file: link.file,
                status: res.status,
                ok: res.status>=200 && res.status<300? "OK" : "FAIL"
            }))
            .catch(() => ({
                href: link.href,
                text: link.text,
                file: link.file,
                status: "Failed request",
                ok: "Unknown"
                
            }))
        return request
    }))
    .then(res => res)    
}